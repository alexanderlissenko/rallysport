#version 420

precision mediump float;
uniform sampler2D firstTexture;
in vec3 fragmentNormal;
in vec2 fragmentTexCoord;
in vec4 positionOut;
in vec4 prevPositionOut;       // The model coordinate, as given by the vertex shader
out vec4 diffuseOutput; // layout(location = 0)
out vec4 normOutput;    // layout(location = 2)
out vec2 velOutput;
//out vec4 blendOutput;   // layout(location = 3)
void main(void)
{
   normOutput = vec4(fragmentNormal, 0);
   vec4 clr = texture(firstTexture, fragmentTexCoord);

   
   //float alpha = clr.a;
   //if (alpha < 0.1)
   //    discard;   // Optimization that will not change the depth buffer
   //blendOutput.rgb = clr.rgb * clr.a; // Pre multiplied alpha
   //blendOutput.a = clr.a;
   
   diffuseOutput = clr;
   
   vec2 a = vec2(positionOut.xy/positionOut.w);
   vec2 b = vec2(prevPositionOut.xy/prevPositionOut.w);
   velOutput = (a-b)*0.5+0.5;
   velOutput = pow(velOutput, vec2(3.0));
}