#version 420

precision mediump float;
uniform sampler2D diffuseTex; // The color information
uniform sampler2D posTex;     // World position
uniform sampler2D normalTex;  // Normals
uniform vec3 camera;          // The coordinate of the camera
uniform vec3 lightPos;

in vec2 position;             // The world position

out vec4 fragColor;           // layout(location = 0)

uniform vec3 scene_ambient_light = vec3(0.3,0.3,0.3);
uniform vec3 scene_light = vec3(0.8,0.8,0.8);
////
vec3 calculateDiffuse(vec3 diffuseLight, vec3 materialDiffuse, vec3 normal, vec3 directionToLight)
{
	return diffuseLight *materialDiffuse* clamp(dot(normal,directionToLight),0,1);
}
vec3 calculateSpecular(vec3 specularLight, vec3 materialSpecular, float materialShininess, vec3 normal, vec3 directionToLight, vec3 directionFromEye)
{
	vec3 h = normalize(directionToLight - directionFromEye);
	float normalizeFactor = ((materialShininess+2.0)/8.0);
	return specularLight * materialSpecular* pow(max(0,dot(h,normal)), materialShininess)*normalizeFactor;
	}
vec3 calculateFresnel(vec3 materialSpecular, vec3 normal, vec3 directionFromEye) 
{
	return materialSpecular + (vec3(1.0)-materialSpecular)*pow(clamp(1.0+dot(directionFromEye,normal),0.0,1.0),5.0);
}

////

void main(void)
{
	vec4 light = vec4(lightPos,1.0);
	vec4 specularGlare = vec4(1.0,1.0,1.0,1.0);
	
   // Load data, stored in textures, from the first stage rendering.
   vec4 diffuse = texture2D(diffuseTex, position.xy);
   vec4 worldPos = texture2D(posTex, position.xy);
   vec4 normal = texture2D(normalTex, position.xy);
   normal = normalize(normal);
   //Constants
   
   
   vec3 ambient = diffuse.xyz * vec3(0.5);
   vec3 specular = vec3(0.5);
   float material_shininess = 25.0;
   
   vec3 directionToLight = normalize(vec3(light-worldPos));
   vec3 directionFromEye = normalize(camera);
   
   
   //Calculate Lighting
   
   vec3 fresnelSpecular = calculateFresnel(specular,normal.xyz, directionFromEye);
   
   vec3 shading = ambient*scene_ambient_light
				+ calculateSpecular(scene_light, fresnelSpecular,material_shininess,normal.xyz,directionToLight,directionFromEye)
				+ calculateDiffuse(scene_light,diffuse.xyz,normal.xyz,directionToLight);
					
   fragColor = vec4(shading,1.0);
   

   
// Some debug features. Enable any of them to get a visual representation
// of an internal buffer.
// fragColor = (normal+1)/2;
// fragColor = diffuse;
// fragColor = preBlend;
// fragColor = worldPos; // Scaling may be needed to range [0,1]
// fragColor = light*vec4(1,1,1,1);
}




